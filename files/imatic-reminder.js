!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=1)}([function(e,t){$(document).ready((function(){$(".modal-recipients-select").select2();const e=$(".widget-toolbox a"),t=$("#imatic-reminder-close-modal");function n(){$("#imatic-reminder-modal").toggleClass("show")}e.on("click",(function(e){if(!$(this).attr("href").includes("imatic_remind_issue.php"))return null;e.preventDefault(),n()})),t.on("click",(function(e){e.preventDefault(),n()})),$(".close").on("click",(function(){n()})),$(".other-button").on("click",(function(){n()}))}))},function(e,t,n){"use strict";n.r(t);n(0);function r(e,t,n=2e3){let r=document.createElement("div");r.style.position="fixed",r.style.top="50%",r.style.left="50%",r.style.padding="20px",r.style.border="1px solid white",r.style.borderRadius="5px",r.style.zIndex="9999",r.style.color="black",r.style.display="block",r.style.backgroundColor=t,r.textContent=e,document.body.appendChild(r),setTimeout((function(){r.style.display="none"}),n)}function o(e,t="POST"){return fetch(e.get("action"),{method:t,body:e}).then(e=>{if(!e.ok)throw r("Response was not ok","red"),new Error("Response was not ok");return e.text()}).then(e=>{let t=JSON.parse(e);return 200===t.status?(r(t.message,"#DEF1D8"),!0):(r(t.message,"red"),!1)}).catch(e=>(console.error("There has been a problem with your fetch operation:",e),Promise.reject(e)))}function i(){let e=document.querySelectorAll(".edit-reminder"),t=document.querySelectorAll(".delete-reminder");e.forEach((function(e){e.addEventListener("click",(function(e){e.preventDefault();const t=this.getAttribute("data-id"),n=this.getAttribute("data-action");let r=document.getElementById("reminder-table-"+t),i=new FormData;r.querySelectorAll("input, textarea").forEach((function(e){i.append(e.name,e.value)})),i.append("action",n),o(i)}))})),t.forEach((function(e){e.addEventListener("click",(function(e){e.preventDefault();const t=this.getAttribute("data-id"),n=this.getAttribute("data-action");let r=document.getElementById("reminder-table-"+t),i=new FormData;r.querySelectorAll("input, textarea").forEach((function(e){i.append(e.name,e.value)})),i.append("action",n),o(i).then(e=>{e&&r&&r.remove()})}))}))}document.addEventListener("DOMContentLoaded",(function(){document.getElementById("imatic-reminder-create-form").addEventListener("submit",(function(e){e.preventDefault();let t=new FormData(this),n=this.getAttribute("action");t.append("action",n),fetch(n,{method:"POST",body:t}).then(e=>{if(!e.ok)throw new Error("Network response was not ok");return e.json()}).then(e=>{if(e&&200===e.status){r(e.message,"#DEF1D8"),this.reset();let t=document.getElementById("reminders-table"),n=document.createElement("tbody");e.reminders.forEach((function(e){let r=document.createElement("tr");r.id="reminder-table-"+e.id,r.innerHTML=`\n                            <td>${e.id}</td>\n                            <td>${e.username}</td>\n                            <td>\n                                <input type="datetime-local" name="remind_at" class="form-control" value="${e.remind_at}"></td>\n                            <td>\n                                <textarea name="message" class="form-control" rows="1" cols="20">${e.message}</textarea>\n                            </td>\n                            <td>${e.reminded?'<i class="btn btn-success btn-xs fa fa-check"/>':'<i class="btn btn-danger btn-xs fa fa-close" />'}</td>\n                            <td>\n                                <button type="button" class="btn btn-primary btn-xs edit-reminder" data-id="${e.id}"\n                                        data-action="${e.edit_action}">\n                                    <i class="fa fa-edit"></i>\n                                </button>\n                                <button type="button" class="btn btn-danger btn-xs delete-reminder" data-id="${e.id}"\n                                        data-action="${e.delete_action}">\n                                    <i class="fa fa-trash" aria-hidden="true"></i>\n                                </button>\n                                <input type="hidden" name="id" value="${e.id}">\n                                <input type="hidden" name="user_id" value="${e.user_id}">\n                            </td>\n                        `,n.appendChild(r),t.appendChild(n)})),i()}else r("An error occurred","red")}).catch(e=>{console.error("There has been a problem with your fetch operation:",e)})})),i()}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,